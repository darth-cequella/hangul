#!/bin/bash

export HEADER='\033[95m';
export OKBLUE='\033[94m';
export OKGREEN='\033[92m';
export WARNING='\033[93m';
export FAIL='\033[91m';
export ENDC='\033[0m';
export BOLD='\033[1m';
export UNDERLINE='\033[4m';

export COMPONENT_TS=".component.ts";
export COMPONENT_HTML=".component.html";
export COMPONENT_CSS=".component.css";

export DIRECTIVE_TS=".directive.ts"

export PACKAGE_JSON="package.json";
export TYPINGS_JSON="typings.json";
export SYSTEMJS_CONFIG_JS="systemjs.config.js";
export TSCONFIG_JSON="tsconfig.json";
export INDEX_HTML="index.html";
export MAIN_TS="app/main.ts";

export NPM_MINIMUM_VERSION="3.x.x";
export NODEJS_MINIMUM_VERSION="v4.x.x";

export GREATER_THAN=1;
export LESS_THAN=2;
export EQUAL=3;

function createPackageJson {
    printf "\tCreating $OKGREEN'$PACKAGE_JSON'$ENDC...\n"
    printf '{
  "name": "angular2-quickstart",
  "version": "1.0.0",
  "scripts": {
    "start": "tsc && concurrently \\"npm run tsc:w\\" \\"npm run lite\\" ",
    "lite": "lite-server",
    "postinstall": "typings install",
    "tsc": "tsc",
    "tsc:w": "tsc -w",
    "typings": "typings"
  },
  "license": "ISC",
  "dependencies": {
    "@angular/common": "2.0.0-rc.4",
    "@angular/compiler": "2.0.0-rc.4",
    "@angular/core": "2.0.0-rc.4",
    "@angular/forms": "0.2.0",
    "@angular/http": "2.0.0-rc.4",
    "@angular/platform-browser": "2.0.0-rc.4",
    "@angular/platform-browser-dynamic": "2.0.0-rc.4",
    "@angular/router": "3.0.0-beta.1",
    "@angular/router-deprecated": "2.0.0-rc.2",
    "@angular/upgrade": "2.0.0-rc.4",
    "systemjs": "0.19.27",
    "core-js": "^2.4.0",
    "reflect-metadata": "^0.1.3",
    "rxjs": "5.0.0-beta.6",
    "zone.js": "^0.6.12",
    "angular2-in-memory-web-api": "0.0.14",
    "bootstrap": "^3.3.6"
  },
  "devDependencies": {
    "concurrently": "^2.0.0",
    "lite-server": "^2.2.0",
    "typescript": "^1.8.10",
    "typings":"^1.0.4"
  }
}\n' > "./$PACKAGE_JSON";
}

function createTypingsJson {
    printf "\tCreating $OKGREEN'$TYPINGS_JSON'$ENDC...\n"
    printf '{
\t"globalDependencies": {
\t\t"core-js": "registry:dt/core-js#0.0.0+20160602141332",
\t\t"jasmine": "registry:dt/jasmine#2.2.0+20160621224255",
\t\t"node": "registry:dt/node#6.0.0+20160621231320"
\t}
}\n' > "./$TYPINGS_JSON";
}

function createSystemjsConfigJS {
    printf "\tCreating '$OKGREEN$SYSTEMJS_CONFIG_JS$ENDC'...\n";
    printf "/**
 * System configuration for Angular 2 samples
 * Adjust as necessary for your application needs.
 */
(function(global) {
  // map tells the System loader where to look for things
  var map = {
    'app':                        'app', // 'dist',
    '@angular':                   'node_modules/@angular',
    'angular2-in-memory-web-api': 'node_modules/angular2-in-memory-web-api',
    'rxjs':                       'node_modules/rxjs'
  };
  // packages tells the System loader how to load when no filename and/or no extension
  var packages = {
    'app':                        { main: 'main.js',  defaultExtension: 'js' },
    'rxjs':                       { defaultExtension: 'js' },
    'angular2-in-memory-web-api': { main: 'index.js', defaultExtension: 'js' },
  };
  var ngPackageNames = [
    'common',
    'compiler',
    'core',
    'forms',
    'http',
    'platform-browser',
    'platform-browser-dynamic',
    'router',
    'router-deprecated',
    'upgrade',
  ];
  // Individual files (~300 requests):
  function packIndex(pkgName) {
    packages['@angular/'+pkgName] = { main: 'index.js', defaultExtension: 'js' };
  }
  // Bundled (~40 requests):
  function packUmd(pkgName) {
    packages['@angular/'+pkgName] = { main: '/bundles/' + pkgName + '.umd.js', defaultExtension: 'js' };
  }
  // Most environments should use UMD; some (Karma) need the individual index files
  var setPackageConfig = System.packageWithIndex ? packIndex : packUmd;
  // Add package entries for angular packages
  ngPackageNames.forEach(setPackageConfig);
  var config = {
    map: map,
    packages: packages
  };
  System.config(config);
})(this);
\n" > "$SYSTEMJS_CONFIG_JS";
}

function createTsconfigJson {
    printf "\tCreating $OKGREEN'$TSCONFIG_JSON'$ENDC...\n"
    printf '{
  "compilerOptions": {
    "target": "es5",
    "module": "commonjs",
    "moduleResolution": "node",
    "sourceMap": true,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "removeComments": false,
    "noImplicitAny": false
  }
}\n' > "$TSCONFIG_JSON";
}

function createIndexHtml {
    printf "\tCreating '$OKGREEN$INDEX_HTML$ENDC'...\n";
    printf '<!DOCTYPE html>

<meta charset="UTF-8">
<meta name="keywords" content="Set keywords here">
<meta name="description" content="Site description goes here">
<meta name="author" content="Author Name">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0">

<!-- Add to homescreen for Chrome on Android -->
<meta name="mobile-web-app-capable" content="yes">
<link rel="icon" sizes="192x192" href="images/android-desktop.png">

<!-- Add to homescreen for Safari on iOS -->
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="apple-mobile-web-app-status-bar-style" content="black">
<meta name="apple-mobile-web-app-title" content="PROJECT_NAME">
<link rel="apple-touch-icon-precomposed" href="images/ios-desktop.png">

<!-- Tile icon for Win8 (144x144 + tile color) -->
<meta name="msapplication-TileImage" content="images/touch/ms-touch-icon-144x144-precomposed.png">
<meta name="msapplication-TileColor" content="#3372DF">
<link rel="shortcut icon" href="images/favicon.png">

<html lang="pt-br">
<head>
\t<title>PROJECT_NAME</title>

\t<!-- Angular and Polyfill -->
\t<script src="node_modules/core-js/client/shim.min.js"></script>
\t<script src="node_modules/zone.js/dist/zone.js"></script>
\t<script src="node_modules/reflect-metadata/Reflect.js"></script>
\t<script src="node_modules/systemjs/dist/system.src.js"></script>
\t<script src="systemjs.config.js"></script>
\t<script>
\t\tSystem.import("app").catch(function(err){ console.error(err); });
\t</script>
\t<!-- /Angular and Poyfill -->
</head>

<body>
\t<h3>Congratulations...</h3>
\t<p>Now,work!!!</p>
</body>

</html>' > "$INDEX_HTML";
}

function createMainTs {
    mkdir "app";
    printf "\tCreating '$OKGREEN$MAIN_TS$ENDC'...\n";
    printf "import {bootstrap} from '@angular/platform-browser-dynamic';

//bootstrap(Category); Edit this!\n" > "$MAIN_TS";

}

function installAmbient {
    printf "\n\n\tCreating ambient to$OKGREEN Angular2$ENDC development\n";
    npm install;

    if [[ $? == 0 ]]; then
	return $?;
    else
	printf "\n\n\t$FAIL-Error on creation of ambient to Angular2 development!!!$ENDC\n\n";	
    fi;
}

function startNewProject {
    mkdir "$1";
    cd "$1";
    printf "\n";

    isNodejsAvailable;
    if [[ $? -eq 0 ]]; then
	isNpmAvailable;
	if [[ $? -eq 0 ]]; then

	    printf "\n";
	    createPackageJson;
	    createTypingsJson;
	    createSystemjsConfigJS;
	    createTsconfigJson;
	    createIndexHtml;
	    createMainTs;
	    installAmbient;
	    
	    if [[ $? -ne 1 ]]; then
		printf "\n\n\n\tNow use $OKGREEN'npm start'$ENDC to start work\n\n";
	    fi;

	fi;

    fi;

}

function compareVersions (){
    typeset    IFS='.'
    typeset -a v1=( $1 )
    typeset -a v2=( $2 )
    typeset    n diff

    for (( n=0; n<4; n+=1 )); do
	diff=$((v1[n]-v2[n]));
	if [ $diff -ne 0 ] ; then
	    if [ $diff -le 0 ]; then
		return $GREATER_THAN;
	    else 
		return $LESS_THAN;
	    fi;
	fi;
    done
    return $EQUAL;
}

function isNpmAvailable {
    if command -v npm>/dev/null; then
	version=`npm -v`;
	
	compareVersions $NPM_MINIMUM_VERSION $version;
	if [[ $? -ne $LESS_THAN ]];then
	    printf "\t$OKGREEN-NPM($version) OK!$ENDC\n";
	    return 0;
	else
	    printf "\t$WARNING-NPM($version), minimum version is $NPM_MINIMUM_VERSION.$ENDC\n";
	    return 1;
	fi;
    else
	printf "\t$FAIL-Error: NPM not found.$ENDC\n"
	return 1;
    fi;
}

function isNodejsAvailable {
    if command -v node>/dev/null; then
	version=`node -v`;

	compareVersions $NODEJS_MINIMUM_VERSION $version;
	if [[ $? -ne $LESS_THAN ]];then
	    printf "\t$OKGREEN-NodeJs($version) OK!$ENDC\n";
	    return 0;
	else
	    printf "\t$WARNING-NodeJs($version), minimum version is $NODEJS_MINIMUM_VERSION.$ENDC\n";
	    return 1;
	fi;
    else
	printf "\t$FAIL-Error: NodeJs not found.$ENDC\n"
	return 1;
    fi;
}

function isEmacsAvailable {
    if command -v emacs>/dev/null; then
	printf "\t$OKGREEN-Emacs OK!$ENDC\n";
	return 0;
    else
	printf "\t$FAIL-Error: NodeJs not found.$ENDC\n"
	return 1;
    fi;
}

function createComponent {
    selectorName="";
    className="";

    if [[ $# < 3 ]]; then
	printf "\nType a 'selector' name: ";
	read selectorName;
	printf "Type a 'class' name: ";
	read className;
    else
	selectorName=$2;
	className=$3;
    fi;

    printf "\n\tCreating component: $OKGREEN$selectorName$ENDC\n\n";

    #Create .ts
    printf "import {Component} from '@angular/core'

@Component({
\tselector: '$selectorName',
\tmoduleId: module.id,
\ttemplateUrl: './$selectorName$COMPONENT_HTML',
\tstyleUrls: ['./$selectorName$COMPONENT_CSS']
})

export class $className {
}\n" > "./app/$selectorName$COMPONENT_TS";

    #Create .html
    printf "<p>Component $className created!</p>\n" > "./app/$selectorName$COMPONENT_HTML";

    #Create .css
    printf "/*TODO*/\n" > "./app/$selectorName$COMPONENT_CSS";
}

function editComponent {
    printf "\n\tEditing '$OKGREEN$1$ENDC' component...\n";

    `emacs --load ~/.emacs.d/lisp/TypeScript.el --file app/$1$COMPONENT_CSS app/$1$COMPONENT_HTML app/$1$COMPONENT_TS`;

    if [[ $? == 0 ]];then
	printf "\t'$OKGREEN$1$ENDC' sucessfully edited.\n\n";
    fi;
}

function removeComponent {
    printf "\n\tRemoving '$OKGREEN$1$ENDC' component...\n";
    eval 'rm ./app/$1.component.*';
    printf "\t'$OKGREEN$1$ENDC' sucefully removed...\n";
    printf "\tRemember to remove all references to '$OKGREEN$1$ENDC' of your project.\n\n";
}

function openProject {
    eval 'emacs --load ~/.emacs.d/lisp/TypeScript.el --file ./index.html &';
}

function createDirective {
    selectorName="";
    className="";

    if [[ $# < 3 ]]; then
	printf "\nType a 'selector' name: ";
	read selectorName;
	printf "Type a 'class' name: ";
	read className;
    else
	selectorName=$2;
	className=$3;
    fi;

    printf "\n\tCreating directive: $OKGREEN$selectorName$ENDC\n\n";

    #Create .ts
    printf "import {Directive} from '@angular/core'

@Directive({
\tselector: '[$selectorName]',
})

export class $className {
}\n" > "./app/$selectorName$DIRECTIVE_TS";
}

function editDirective {
    printf "\n\tEditing '$OKGREEN$1$ENDC' directive...\n";

    `emacs --load ~/.emacs.d/lisp/TypeScript.el --file app/$1$DIRECTIVE_TS`;

    if [[ $? == 0 ]];then
	printf "\t'$OKGREEN$1$ENDC' sucessfully edited.\n\n";
    fi;
}

#---------------------------------------------------------------------------

if [[ $# > 0 ]]; then

    if [[ $1 == "create-component" || $1 == "-cc" ]]; then
	createComponent $@;
    fi;

    if [[ $1 == "edit-component" || $1 == "-ec" ]]; then
	if [[ $# == 2 ]]; then
	    editComponent $2;
	else
	    printf "\n\tPlease indicate the component to edit. (use selector name)\n\n";
	fi;
    fi;

    if [[ $1 == "remove-component" || $1 == "-rc" ]]; then
	if [[ $# == 2 ]]; then
	    removeComponent $2;
	else
	    printf "\n\tPlease indicate the component to edit. (use selector name)\n\n";
	fi;
    fi;

    if [[ $1 == "new-project" || $1 == "-np" ]]; then
	if [[ $# == 2 ]]; then
	    startNewProject $2;
	else
	    printf "\n\tPlease indicate a name to the project.\n\n";
	fi;
    fi;

    if [[ $1 == "install-ambient" ]]; then
	installAmbient;
    fi;

    if [[ $1 == "open-project" ]]; then
	openProject;
    fi;

    if [[ $1 == "create-directive" || $1 == "-cd" ]]; then
	createDirective $@;
    fi;

    if [[ $1 == "edit-directive" || $1 == "-ed" ]]; then
	if [[ $# == 2 ]];then
	    editDirective $2;
	else
	    printf "\n\tPlease the directive selector.\n\n";
	fi;
    fi;

fi;
